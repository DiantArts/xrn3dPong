///////////////////////////////////////////////////////////////////////////
// Precompilled headers
///////////////////////////////////////////////////////////////////////////
#include <pch.hpp>

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <Game/Server/Server.hpp>
#include "Game/MessageType.hpp"



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::game::Server::Server(
    ::std::uint16_t port
)
    : ::xrn::network::server::Server<::game::MessageType>{ port }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Events
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// \brief Behavior when receiving a message
///
///////////////////////////////////////////////////////////////////////////
void ::game::Server::onReceive(
    ::xrn::network::Message<::game::MessageType>& message,
    ::std::shared_ptr<::xrn::network::Connection<::game::MessageType>> connection
)
{
    switch (message.getType()) {
    case ::game::MessageType::playerPosition: {
        ::glm::vec3 pos{
            message.pull<float>()
            , message.pull<float>()
            , message.pull<float>()
        };
        ::fmt::print("<- C{} '[{};{};{}]'\n", connection->getId(), pos.x, pos.y, pos.z);
        // send to room
        break;
    } default: {
        ::fmt::print(
            "<- C{} '{}'\n"
            , message.pull<::xrn::Id>()
            , message.pull<::std::string>()
        );
        this->tcpSendToAllClients(message, connection);
        break;
    }}
}
