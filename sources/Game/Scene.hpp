#pragma once

#include <xrn/Engine/AScene.hpp>
#include <xrn/Engine/System/Render.hpp>
#include <Game/MessageType.hpp>

namespace game {

///////////////////////////////////////////////////////////////////////////
/// \brief Scene of the came
/// \ingroup game
///
/// \include Scene.hpp <Game/Scene.hpp>
///
///////////////////////////////////////////////////////////////////////////
class Scene
    : public ::xrn::engine::AScene
    , public ::xrn::network::client::Client<::game::MessageType>
{

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Static
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    static constexpr const ::glm::vec3 mapSize{ 10.0f, 20.0f, 50.0f };

    static constexpr const ::glm::vec3 maxMapPosition{ 17.9f, 8.0f, 0.0f };



public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    /// \warning Call to connectToServer() is required to run the scene
    ///
    /// \see connectToServer()
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Scene();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief loads the scene
    ///
    ///////////////////////////////////////////////////////////////////////////
    void loadScene();



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Rule of 5
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Scene();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Scene(
        const Scene&
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        const Scene&
    ) noexcept
        -> Scene& = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Scene(
        Scene&&
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        Scene&&
    ) noexcept
        -> Scene& = delete;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Events
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// if return false, scene exits
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto onUpdate()
        -> bool override;

    ///////////////////////////////////////////////////////////////////////////
    /// if return false, scene exits
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto postUpdate()
        -> bool override;

    ///////////////////////////////////////////////////////////////////////////
    /// Automatically called when handling events
    /// Called if camera is not detached
    ///////////////////////////////////////////////////////////////////////////
    void onKeyPressed(
        ::std::int16_t keyCode
    ) override;

    ///////////////////////////////////////////////////////////////////////////
    /// Automatically called when handling events
    /// Called if camera is not detached
    ///////////////////////////////////////////////////////////////////////////
    void onKeyReleased(
        ::std::int16_t keyCode
    ) override;

    ///////////////////////////////////////////////////////////////////////////
    /// Automatically called when handling events
    /// Called if camera is not detached
    ///////////////////////////////////////////////////////////////////////////
    void onMouseMoved(
        ::glm::vec2 position
    ) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief On message received from the server
    ///
    ///////////////////////////////////////////////////////////////////////////
    void onReceive(
        ::xrn::network::Message<::game::MessageType>& message,
        ::std::shared_ptr<::xrn::network::Connection<::game::MessageType>> connection
    ) override;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Queue
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Wait for the server to find a gamme
    ///
    ///////////////////////////////////////////////////////////////////////////
    void queueForGame();




private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Helpers
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void loadObjects();

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void loadMap();

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void loadLights();



private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Member variables
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ::entt::entity m_enemy;

};

} // namespace game
