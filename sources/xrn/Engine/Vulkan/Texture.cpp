///////////////////////////////////////////////////////////////////////////
// Precompilled headers
///////////////////////////////////////////////////////////////////////////
#include <pch.hpp>

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Engine/Vulkan/Texture.hpp>
#include <xrn/Engine/Configuration.hpp>

///////////////////////////////////////////////////////////////////////////
// Implem
///////////////////////////////////////////////////////////////////////////
#define STB_IMAGE_IMPLEMENTATION
#include <stb/stb_image.h>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::engine::vulkan::Texture::Texture(
    const ::std::string_view filename
)
{
    int texWidth, texHeight, texChannels;

    ::std::string filepath;
    filepath.reserve(::xrn::engine::configuration.filepath.textureDirectory.size() + filename.size());
    filepath += ::xrn::engine::configuration.filepath.textureDirectory;
    filepath += filename;

    stbi_uc* pixels{ ::stbi_load(
        filepath.c_str()
        , &texWidth
        , &texHeight
        , &texChannels
        , STBI_rgb_alpha
    ) };
    VkDeviceSize imageSize{ texWidth * texHeight * 4 };

    XRN_FATAL_ASSERT(pixels, "failed to load texture image!");
}
