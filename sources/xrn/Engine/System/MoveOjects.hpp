#pragma once

#include <xrn/Engine/Vulkan/Device.hpp>
#include <xrn/Engine/Vulkan/Pipeline.hpp>
#include <xrn/Engine/Camera.hpp>
#include <xrn/Engine/Vulkan/FrameInfo.hpp>
#include <xrn/Engine/Component/Transform3d.hpp>

namespace xrn::engine::system {

///////////////////////////////////////////////////////////////////////////
/// \brief No clue what it does xD
/// \ingroup vulkan
///
/// \include MoveOjects.hpp <MoveOjects.hpp>
///
///////////////////////////////////////////////////////////////////////////
class MoveOjects
    // : public ::xrn::engine::system::ASystem
{

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Basic
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void operator()(
        ::xrn::engine::vulkan::FrameInfo& frameInfo
        , ::xrn::engine::component::Control& control
        , ::xrn::OptRef<::xrn::engine::component::Position> position
        , ::xrn::OptRef<::xrn::engine::component::Rotation> rotation
    ) const;



private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Helpers
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void createPipelineLayout(
        ::VkDescriptorSetLayout descriptorSetLayout
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void createPipeline(VkRenderPass renderPass);



private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Member variables
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ::xrn::engine::vulkan::Device& m_device;
    ::std::unique_ptr<::xrn::engine::vulkan::Pipeline> m_pPipeline;
    ::VkPipelineLayout m_pipelineLayout;


};

} // namespace xrn::engine::system
