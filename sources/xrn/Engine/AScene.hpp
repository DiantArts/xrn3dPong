#pragma once

#include <xrn/Engine/Vulkan/Window.hpp>
#include <xrn/Engine/Vulkan/Device.hpp>
#include <xrn/Engine/Vulkan/Renderer.hpp>
#include <xrn/Engine/Vulkan/FrameInfo.hpp>
#include <xrn/Engine/Vulkan/Descriptor.hpp>
#include <xrn/Engine/System/Render.hpp>
#include <xrn/Engine/System/PointLight.hpp>
#include <xrn/Engine/Camera.hpp>

namespace xrn::engine {

///////////////////////////////////////////////////////////////////////////
/// \brief No clue what it does xD
/// \ingroup vulkan
///
/// \include AScene.hpp <AScene.hpp>
///
///////////////////////////////////////////////////////////////////////////
class AScene {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit AScene();



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Rule of 5
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~AScene();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    AScene(
        const AScene&
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        const AScene&
    ) noexcept
        -> AScene& = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    AScene(
        AScene&&
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        AScene&&
    ) noexcept
        -> AScene& = delete;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Virtuals
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// if return false, scene exits
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] virtual auto onUpdate()
        -> bool = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// if return false, scene exits
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] virtual auto postUpdate()
        -> bool = 0;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Getters/Setters
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getWindow()
        -> ::xrn::engine::vulkan::Window&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        typename ComponentType
    > [[ nodiscard ]] auto getPlayerComponent()
        -> ComponentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        typename ComponentType
    > [[ nodiscard ]] auto tryGetPlayerComponent()
        -> ComponentType*;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Basic
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void run();

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto update()
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void updateCamera();

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void draw();

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void limitFrameRate();



protected:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Member variables
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    // Vulkan
    ::xrn::engine::vulkan::Window m_window{ true };
    ::xrn::engine::vulkan::Device m_device{ m_window };

    ::std::unique_ptr<::xrn::engine::vulkan::descriptor::SetLayout> m_pDescriptorSetLayout;
    ::std::unique_ptr<::xrn::engine::vulkan::descriptor::Pool> m_pDescriptorPool;
    ::std::vector<::VkDescriptorSet> m_descriptorSets{ ::xrn::engine::vulkan::SwapChain::MAX_FRAMES_IN_FLIGHT };
    ::xrn::engine::vulkan::FrameInfo m_frameInfo;

    ::std::vector<::std::unique_ptr<::xrn::engine::vulkan::Buffer>> m_uboBuffers;
    ::xrn::engine::vulkan::Renderer m_renderer{ m_window, m_device };

    ::xrn::engine::system::Render m_renderSystem;
    ::xrn::engine::system::PointLight m_pointLightSystem;

    // ECS
    ::entt::registry m_registry;

    // Special entities
    ::entt::entity m_player;
    ::xrn::engine::Camera m_camera;

};

} // namespace xrn::engine

#include <xrn/Engine/AScene.impl.hpp>
